# via:https://phus.lu/nginx.conf
map $request_uri $proxy_backend {
	~^/vaultwarden(/.*)?$ http://127.0.0.1:9999;
	~^/aria2(/.*)?$ http://127.0.0.1:8080;
	~^/jellyfin(/.*)?$ http://127.0.0.1:8096;
	# 下面的程序需要设置base_url才可以使用
	~^/alist(/.*)?$ http://unix:/dev/shm/alist/alist.socket;
	~^/file(/.*)?$ http://unix:/dev/shm/filebrowser/filebrowser.socket;
#	~^/drive(/.*)?$ http://unix:/dev/shm/cloudreve/cloudreve.socket;
}

map $request_uri $should_rewrite {
	default 1;
	~^/alist/ 0;
}

server {
	listen 443 ssl;
	listen [::]:443 ssl;
	listen 443 quic;
	listen [::]:443 quic;
	server_name file.example.com;
	root /html/file;

	include /etc/nginx/conf.d/config.ssl;
	# include /etc/nginx/conf.d/config.cloudflare; # 使用 Cloudflare 取消此项注释

	log_not_found off;
	client_max_body_size 4G;
	charset utf-8;

	location = / {
		autoindex on;
		autoindex_exact_size off;
		autoindex_localtime on;
		add_after_body "/autoindex.html";
	}

	location ~ ^/(z/) {
		auth_basic "Please Login In";
		auth_basic_user_file /html/file/.htpasswd;
		autoindex on;
		autoindex_exact_size off;
		autoindex_localtime on;
		add_after_body "/autoindex.html";
	}

	location ~ ^/(vaultwarden|aria2|jellyfin)(/|$) {
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection $connection_upgrade;

		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_ssl_server_name on;
		proxy_redirect off;

		proxy_buffers 16 256K;
		proxy_pass $proxy_backend;

		if ($should_rewrite) {
			rewrite ^/([^/]+)/(.*)$ /$2 break;
		}

	}

	location = /ssh.pub {
		default_type text/plain;
		add_header x-ssh-import "curl -sS https://$host/ssh.pub | tee -a  ~/.ssh/authorized_keys";
		try_files /ssh.pub =404;
	}

	location = /generate_204 {
		return 204;
	}

	location = /ncsi.txt {
		return 200 "Microsoft NCSI";
	}

	location /dav/ {
		dav_methods PUT DELETE MKCOL COPY MOVE;
		# dav_ext_methods PROPFIND OPTIONS;
		create_full_put_path on;
		dav_access user:rw group:rw all:r;
	}

	location ~ ^/speech/.+\.md$ {
		default_type text/html;
		add_after_body /.theme/markdown.html;
	}

	location ~* \.(ico|css|gif|jpeg|jpg|png|woff|ttf|otf|svg|woff2|eot)$ {
		expires 1d;
		access_log off;
		add_header Pragma public;
	}

	location ~ \.(md|log|pac|keys|lua|json|yaml|toml|conf|cmd|sh|bash|h|c|cpp|hpp|py|go|service|dockerfile)$ {
		default_type text/plain;
	}

	location ~ ^/(bashrc|vimrc|server/ipinfo)$ {
		default_type text/plain;
	}

	location ~ ^/\.(?!well-known).* {
		return 418;
	}

	resolver 8.8.8.8 1.1.1.1 valid=300s;
	resolver_timeout 5s;
	location /get_ip {
		proxy_pass https://api.live.bilibili.com/ip_service/v1/ip_service/get_ip_addr?ip=$remote_addr;
		proxy_set_header Host api.live.bilibili.com;
	}

	location ~ ^(.*)/$ {
		autoindex on;
		autoindex_exact_size off;
		autoindex_localtime on;
		add_after_body "/autoindex.html";
	}

	access_log /var/log/nginx/file.log json_format;
	error_log /var/log/nginx/error.file.log;
}
